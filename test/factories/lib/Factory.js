const Sequelize = require("sequelize");
const MissingRequiredAttributesError = require("./errors/MissingRequiredAttributesError");

class Factory {
  constructor(model, defaultAttributes) {
    this.model = model;
    this.defaultAttributes = defaultAttributes;

    this._assertModel();
    this._assertAttributes();
  }

  static define(model, defaultAttributes = {}) {
    return new Factory(model, defaultAttributes);
  }

  async create(attributes) {
    return this.model.create({
      ...(await this._convertSequenceToValueFor(this.defaultAttributes)),
      ...attributes,
    });
  }

  async build(attributes) {
    return this.model.build({
      ...(await this._convertSequenceToValueFor(this.defaultAttributes)),
      ...attributes,
    });
  }

  async _count() {
    this.count = this.count || (await this.model.count());
    return this.count;
  }

  async _convertSequenceToValueFor(attributes) {
    const count = await this._count();

    return Object.keys(attributes).reduce((acc, key) => {
      acc[key] =
        typeof attributes[key] === "function"
          ? attributes[key](count + 1)
          : attributes[key];
      return acc;
    }, {});
  }

  _assertModel() {
    if (this.model.prototype instanceof Sequelize.Model) return;
    throw new TypeError("Model should be a sequelize model");
  }

  _assertAttributes() {
    const { rawAttributes } = this.model;
    const requiredAttributes = Object.keys(rawAttributes).filter(
      _isRequiredAttribute
    );
    if (
      Object.keys(this.defaultAttributes).some(
        (attr) => !requiredAttributes.includes(attr)
      )
    )
      throw new MissingRequiredAttributesError(
        this.name,
        this.defaultAttributes,
        requiredAttributes
      );
  }
}

const _isRequiredAttribute = (attr) => {
  return !attr.allowNull && !attr._autoGenerated;
};

module.exports = Factory;
